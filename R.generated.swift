//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `PlaceTableViewCell`.
    static let placeTableViewCell = _R.nib._PlaceTableViewCell()
    
    /// `UINib(name: "PlaceTableViewCell", in: bundle)`
    static func placeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.placeTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `placeTableViewCell`.
    static let placeTableViewCell: Rswift.ReuseIdentifier<PlaceTableViewCell> = Rswift.ReuseIdentifier(identifier: "placeTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `SearchPlaceViewController`, and contains static references to 1 segues.
    struct searchPlaceViewController {
      /// Segue identifier `showMap`.
      static let showMap: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchPlaceViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMap")
      
      /// Optionally returns a typed version of segue `showMap`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMap(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchPlaceViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchPlaceViewController.showMap, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 2 localization keys.
    struct main {
      /// pt translation: Procure no Google Maps
      /// 
      /// Locales: pt, en
      static let dxsvUwEPlaceholder = Rswift.StringResource(key: "8DX-SV-uwE.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["pt", "en"], comment: nil)
      /// pt translation: Todos os resultados
      /// 
      /// Locales: pt, en
      static let eeW5ENLTitle = Rswift.StringResource(key: "4Ee-W5-ENL.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt", "en"], comment: nil)
      
      /// pt translation: Procure no Google Maps
      /// 
      /// Locales: pt, en
      static func dxsvUwEPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("8DX-SV-uwE.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt translation: Todos os resultados
      /// 
      /// Locales: pt, en
      static func eeW5ENLTitle(_: Void = ()) -> String {
        return NSLocalizedString("4Ee-W5-ENL.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _PlaceTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PlaceTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "placeTableViewCell"
      let name = "PlaceTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PlaceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaceTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
